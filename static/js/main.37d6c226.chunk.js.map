{"version":3,"sources":["services/ratesAPI.js","services/currencyAPI.js","Components/inputGroup/index.js","App.js","serviceWorker.js","index.js"],"names":["PROXY","URLBEGINNING","URLENDING","RatesAPI","getData","a","currency1","currency2","fetch","then","data","json","console","log","currencyURL","currencyAPI","rates","InputComponent","props","useState","myval","setmyval","fromCurrency","setfromCurrency","toCurrency","settoCurrency","currenciesObject","amount","currencies","setCurrencies","getCurrencies","randomFunction","currenciesArray","property","push","map","currency","useEffect","convertCurrency","res","chart","result","indicators","quote","close","length","sendAmount","e","target","value","Row","Col","FormGroup","Label","placeholderFrom","Input","type","name","id","onClick","newCurrency","key","className","placeholder","onChange","placeholderTo","disabled","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4VACMA,EAAQ,uCACRC,EAAe,qDACfC,EAAY,oEAmBHC,EAjBE,CACbC,QAAQ,WAAD,4BAAE,0CAAAC,EAAA,6DAAOC,EAAP,+BAAmB,MAAOC,EAA1B,+BAAsC,MAAtC,kBAEYC,MAAMR,EAAQC,EAAeK,EAAYC,EAAYL,GAC7DO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAElBF,MAAK,SAACC,GAEC,OADAE,QAAQC,IAAI,mBAAoBH,GACzBA,KAPlB,wEAWDE,QAAQC,IAAI,+BAAZ,MAXC,yDAAF,kDAAC,ICNNC,EAAc,2CAoBLC,EAjBK,CAChBX,QAAQ,WAAD,4BAAE,sCAAAC,EAAA,4FAAmB,MAAnB,+BAAsC,MAAtC,kBAEYG,MALX,uCAKyBM,GACtBL,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAElBF,MAAK,SAACC,GAEC,OADAE,QAAQC,IAAI,sBAAuBH,GAC5BA,EAAKM,SAPvB,wEAWDJ,QAAQC,IAAI,iCAAZ,MAXC,yDAAF,kDAAC,IC4IGI,EAvIQ,SAACC,GAAW,IAAD,EACNC,qBADM,mBACzBC,EADyB,KAClBC,EADkB,OAEQF,mBAAS,IAFjB,mBAEzBG,EAFyB,KAEXC,EAFW,OAGIJ,mBAAS,IAHb,mBAGzBK,EAHyB,KAGbC,EAHa,KAI1BC,EAAmB,GACnBC,EAAS,EALiB,EAMIR,mBAAS,CAAC,QANd,mBAMzBS,EANyB,KAMbC,EANa,KAQxBC,EAAa,uCAAG,sBAAAzB,EAAA,sEACOU,EAAYX,UADnB,OAClBsB,EADkB,OAElBK,IACAnB,QAAQC,IAAI,8BAA+Be,GAHzB,2CAAH,qDAMnB,SAASG,IACL,IAAIC,EAAkB,GAEtB,IAAK,IAAMC,KADXrB,QAAQC,IAAI,aACWa,EACnBM,EAAgBE,KAAKD,GAGzBD,EAAgBG,KAAI,SAAAC,GAChB,OAAOA,KAEXxB,QAAQC,IAAI,UAAWmB,GACvBH,EAAcG,GAGlBK,qBAAU,WAEFP,MACD,IAGP,IAAIQ,EAAe,uCAAG,gCAAAjC,EAAA,yDAClBO,QAAQC,IAAI,+CACZD,QAAQC,IAAI,iBAAkBS,GAC9BV,QAAQC,IAAI,eAAgBW,IACxBF,IAAgBE,EAJF,gCAKErB,EAASC,QAAQkB,EAAcE,GALjC,OAMU,OADpBe,EALU,QAMNC,MAAMC,OAEV7B,QAAQC,IAAI,mCAEZD,QAAQC,IAAI,kCAAmC0B,GAC3C7B,EAAO6B,EAAIC,MAAMC,OAAO,GAAGC,WAAWC,MAAM,GAAGC,MAC/CH,EAASF,EAAIC,MAAMC,OAAO,GAAGC,WAAWC,MAAM,GAAGC,MAAMlC,EAAKmC,OAAS,GAEzExB,EADAD,EAAQqB,EAASd,GAEjBf,QAAQC,IAAI,mBAAoBO,IAftB,2CAAH,qDAiCf0B,EAAU,uCAAG,WAAOC,GAAP,SAAA1C,EAAA,6DACbsB,EAASoB,EAAEC,OAAOC,MADL,SAEHX,IAFG,mFAAH,sDAMd,OADA1B,QAAQC,IAAI,+BAAgCe,GAExC,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEI,6BAGI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAQnC,EAAMoC,gBAAd,KACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,KAAK,SAASC,GAAG,gBAC/BC,QAAS,SAACZ,GAAD,OAtBVa,EAsBoCb,EAAEC,OAAOC,MArBnE3B,EAAesC,EACXrC,EAAgBqC,GAChBhD,QAAQC,IAAI,uBAAwBS,GAHnB,IAACsC,IAwBEhC,EAAWO,KAAI,SAACC,EAAUyB,GAEtB,OAAO,4BAAQA,IAAKA,EAAKZ,MAAOb,GAAWA,QAM3D,wBAAI0B,UAAU,SACd,6BACI,kBAACP,EAAA,EAAD,CAAOC,KAAK,OAAOM,UAAU,aAAaC,YAAa,QAASC,SAAU,SAACjB,GAAD,OAAOD,EAAWC,OAIhG,wBAAIe,UAAU,WAMtB,kBAACX,EAAA,EAAD,KACI,6BAGI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAQnC,EAAM+C,cAAd,KACA,kBAACV,EAAA,EAAD,CAAOC,KAAK,SAASC,KAAK,SAASC,GAAG,gBAC/BC,QAAS,SAACZ,GAAD,OAzDZa,EAyDoCb,EAAEC,OAAOC,MAxDjEzB,EAAaoC,EACTnC,EAAcmC,GACdhD,QAAQC,IAAI,qBAAsBW,GAHnB,IAACoC,IA2DIhC,EAAWO,KAAI,SAACC,EAAUyB,GACtB,OAAO,4BAAQA,IAAKA,EAAKZ,MAAOb,GAAWA,QAM3D,wBAAI0B,UAAU,SACd,6BACI,kBAACP,EAAA,EAAD,CAAOW,UAAQ,EAACV,KAAK,OAAOE,GAAG,YAAYI,UAAU,aAC9CC,YAAa,kBACbd,MAAO7B,KAElB,wBAAI0C,UAAU,a,sBCnHnBK,MAff,WAEI,OACI,yBAAKL,UAAU,QACX,kBAACM,EAAA,EAAD,KACI,kBAAC,EAAD,CACId,gBAAgB,OAChBW,cAAc,UCDdI,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6HxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBvE,MAAK,SAAAwE,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.37d6c226.chunk.js","sourcesContent":["//TODO remove proxy at some point\nconst PROXY = 'https://cors-anywhere.herokuapp.com/';\nconst URLBEGINNING = 'https://query1.finance.yahoo.com/v7/finance/chart/';\nconst URLENDING = '=x?indicators=close&includeTimestamps=false&range=3mo&interval=1d';\n\nconst RatesAPI = {\n    getData: async (currency1 = 'USD', currency2 = 'CUP') => {\n        try {\n            return await fetch(PROXY + URLBEGINNING + currency1 + currency2 + URLENDING,)\n                .then(data => data.json())\n                // .then(data => this.setState({data, loading: false}))\n                .then((data) => {\n                        console.log('FROM RatesAPI.js', data);\n                        return data;\n                    }\n                );\n        } catch (e) {\n            console.log(\"SOMETHING WENT WRONG BRO O_O\", e);\n        }\n    }\n};\n\nexport default RatesAPI;","const currencyURL = 'http://www.convertmymoney.com/rates.json';\nconst PROXY = 'https://cors-anywhere.herokuapp.com/';\n\nconst currencyAPI = {\n    getData: async (currency1 = 'USD', currency2 = 'CUP') => {\n        try {\n            return await fetch(PROXY + currencyURL)\n                .then(data => data.json())\n                // .then(data => this.setState({data, loading: false}))\n                .then((data) => {\n                        console.log('FROM currencyAPI.js', data);\n                        return data.rates;\n                    }\n                );\n        } catch (e) {\n            console.log(\"currencyAPI WENT WRONG BRO O_O\", e);\n        }\n    }\n};\n\nexport default currencyAPI;","import React, {useEffect, useState} from 'react';\nimport './style.css';\nimport {Col, FormGroup, Input, Label, Row} from 'reactstrap';\nimport RatesAPI from \"../../services/ratesAPI\";\nimport currencyAPI from \"../../services/currencyAPI\";\n\n// const currencyFlag = require('currency-codes-ru-en-names');\n\n\nconst InputComponent = (props) => {\n    let [myval, setmyval] = useState();\n    let [fromCurrency, setfromCurrency] = useState(\"\");\n    let [toCurrency, settoCurrency] = useState(\"\");\n    let currenciesObject = [];\n    let amount = 0;\n    let [currencies, setCurrencies] = useState([\"lol\"]);\n\n    const getCurrencies = async () => {\n        currenciesObject = await currencyAPI.getData();\n        randomFunction();\n        console.log('Currencies in this function', currencies);\n    };\n\n    function randomFunction() {\n        let currenciesArray = [];\n        console.log(\"trackcall\");\n        for (const property in currenciesObject) {\n            currenciesArray.push(property);\n        }\n\n        currenciesArray.map(currency => {\n            return currency;\n        });\n        console.log(\"Filled?\", currenciesArray);\n        setCurrencies(currenciesArray);\n    }\n\n    useEffect(() => {\n            // Update the document title using the browser API\n            getCurrencies();\n        }, []\n    );\n\n    let convertCurrency = async () => {\n        console.log(\"I HOPE THIS ISNT BEING CALLED AUTOMATICALLY\");\n        console.log(\"FromCurrency: \", fromCurrency);\n        console.log(\"ToCurrency: \", toCurrency);\n        if (fromCurrency && toCurrency) {\n            let res = await RatesAPI.getData(fromCurrency, toCurrency);\n            if (res.chart.result == null) {\n                //TODO SOME CONVERSION EXIST WHY ? IDK\n                console.log(\"THIS CONVERSION DOES NOT EXIST\");\n            } else {\n                console.log(\"THE converter is being obtained\", res);\n                let data = res.chart.result[0].indicators.quote[0].close;\n                let result = res.chart.result[0].indicators.quote[0].close[data.length - 1];\n                myval = result * amount;\n                setmyval(myval);\n                console.log('Local myval is: ', myval);\n            }\n        }\n    };\n\n\n    let changeDropDownTo = (newCurrency) => (\n        toCurrency = newCurrency,\n            settoCurrency(newCurrency),\n            console.log(\"Local toCurrency: \", toCurrency)\n    );\n\n    let changeDropDownFrom = (newCurrency) => (\n        fromCurrency = newCurrency,\n            setfromCurrency(newCurrency),\n            console.log(\"Local fromCurrency: \", fromCurrency)\n    );\n\n    let sendAmount = async (e) => (\n        amount = e.target.value,\n            await convertCurrency()\n    );\n\n    console.log(\"Why am I getting fucked now?\", currencies);\n    return (\n        <Row>\n            <Col>\n                {/*From*/}\n                <div>\n                    {/* <p>Test? {currencyFlag.names(\"USD\", \"en\")}</p> */}\n                    {/*{console.log(\"HERE\",myCurrencies.length)}*/}\n                    <FormGroup>\n                        <Label>{props.placeholderFrom} </Label>\n                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\"\n                               onClick={(e) => changeDropDownFrom(e.target.value)}>\n                            {\n                                currencies.map((currency, key) => {\n                                    // console.log(currency);\n                                    return <option key={key} value={currency}>{currency}</option>\n                                })\n                            }\n\n                        </Input>\n                    </FormGroup>\n                    <hr className=\"my-2\"/>\n                    <div>\n                        <Input type=\"text\" className=\"amountText\" placeholder={\"Value\"} onChange={(e) => sendAmount(e)}\n                            // value={props.convertedValue}\n                        />\n                    </div>\n                    <hr className=\"my-2\"/>\n\n                </div>\n            </Col>\n\n            {/*To*/}\n            <Col>\n                <div>\n                    {/* <p>test {currencyFlag.names(\"USD\", \"en\")}</p> */}\n                    {/*{console.log(\"HERE\",myCurrencies.length)}*/}\n                    <FormGroup>\n                        <Label>{props.placeholderTo} </Label>\n                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\"\n                               onClick={(e) => changeDropDownTo(e.target.value)}>\n                            {\n                                currencies.map((currency, key) => {\n                                    return <option key={key} value={currency}>{currency}</option>\n                                })\n                            }\n\n                        </Input>\n                    </FormGroup>\n                    <hr className=\"my-2\"/>\n                    <div>\n                        <Input disabled type=\"text\" id=\"converted\" className=\"amountText\"\n                               placeholder={\"Converted Value\"}\n                               value={myval}/>\n                    </div>\n                    <hr className=\"my-2\"/>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\n\nexport default InputComponent;","import React from 'react';\nimport InputText from './Components/inputGroup'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Container} from 'reactstrap';\n\nfunction App() {\n\n    return (\n        <div className=\"card\">\n            <Container>\n                <InputText\n                    placeholderFrom=\"From\"\n                    placeholderTo=\"To\"\n                />\n            </Container>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}